{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1diwgfuV6WJuDhz5hfAIKot4pgNH02X4y","authorship_tag":"ABX9TyMhJl0K2nYBT20lCD+FmmN6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### To install libraries"],"metadata":{"id":"yCx6qDFfSsP9"}},{"cell_type":"code","source":["!pip install scrapy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K__57k1rSgm_","executionInfo":{"status":"ok","timestamp":1694419805493,"user_tz":-330,"elapsed":14841,"user":{"displayName":"Taru Agarwal","userId":"06943546457686899005"}},"outputId":"40f21013-1a34-444a-88e4-55ec1eadcc5a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scrapy\n","  Downloading Scrapy-2.10.1-py2.py3-none-any.whl (281 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m281.4/281.4 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting Twisted<23.8.0,>=18.9.0 (from scrapy)\n","  Downloading Twisted-22.10.0-py3-none-any.whl (3.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: cryptography>=36.0.0 in /usr/local/lib/python3.10/dist-packages (from scrapy) (41.0.3)\n","Collecting cssselect>=0.9.1 (from scrapy)\n","  Downloading cssselect-1.2.0-py2.py3-none-any.whl (18 kB)\n","Collecting itemloaders>=1.0.1 (from scrapy)\n","  Downloading itemloaders-1.1.0-py3-none-any.whl (11 kB)\n","Collecting parsel>=1.5.0 (from scrapy)\n","  Downloading parsel-1.8.1-py2.py3-none-any.whl (17 kB)\n","Requirement already satisfied: pyOpenSSL>=21.0.0 in /usr/local/lib/python3.10/dist-packages (from scrapy) (23.2.0)\n","Collecting queuelib>=1.4.2 (from scrapy)\n","  Downloading queuelib-1.6.2-py2.py3-none-any.whl (13 kB)\n","Collecting service-identity>=18.1.0 (from scrapy)\n","  Downloading service_identity-23.1.0-py3-none-any.whl (12 kB)\n","Collecting w3lib>=1.17.0 (from scrapy)\n","  Downloading w3lib-2.1.2-py3-none-any.whl (21 kB)\n","Collecting zope.interface>=5.1.0 (from scrapy)\n","  Downloading zope.interface-6.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (246 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m247.0/247.0 kB\u001b[0m \u001b[31m16.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting protego>=0.1.15 (from scrapy)\n","  Downloading Protego-0.3.0-py2.py3-none-any.whl (8.5 kB)\n","Collecting itemadapter>=0.1.0 (from scrapy)\n","  Downloading itemadapter-0.8.0-py3-none-any.whl (11 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from scrapy) (67.7.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from scrapy) (23.1)\n","Collecting tldextract (from scrapy)\n","  Downloading tldextract-3.5.0-py3-none-any.whl (97 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m97.2/97.2 kB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: lxml>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from scrapy) (4.9.3)\n","Collecting PyDispatcher>=2.0.5 (from scrapy)\n","  Downloading PyDispatcher-2.0.7-py3-none-any.whl (12 kB)\n","Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.10/dist-packages (from cryptography>=36.0.0->scrapy) (1.15.1)\n","Collecting jmespath>=0.9.5 (from itemloaders>=1.0.1->scrapy)\n","  Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n","Requirement already satisfied: attrs>=19.1.0 in /usr/local/lib/python3.10/dist-packages (from service-identity>=18.1.0->scrapy) (23.1.0)\n","Requirement already satisfied: pyasn1 in /usr/local/lib/python3.10/dist-packages (from service-identity>=18.1.0->scrapy) (0.5.0)\n","Requirement already satisfied: pyasn1-modules in /usr/local/lib/python3.10/dist-packages (from service-identity>=18.1.0->scrapy) (0.3.0)\n","Collecting constantly>=15.1 (from Twisted<23.8.0,>=18.9.0->scrapy)\n","  Downloading constantly-15.1.0-py2.py3-none-any.whl (7.9 kB)\n","Collecting incremental>=21.3.0 (from Twisted<23.8.0,>=18.9.0->scrapy)\n","  Downloading incremental-22.10.0-py2.py3-none-any.whl (16 kB)\n","Collecting Automat>=0.8.0 (from Twisted<23.8.0,>=18.9.0->scrapy)\n","  Downloading Automat-22.10.0-py2.py3-none-any.whl (26 kB)\n","Collecting hyperlink>=17.1.1 (from Twisted<23.8.0,>=18.9.0->scrapy)\n","  Downloading hyperlink-21.0.0-py2.py3-none-any.whl (74 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m74.6/74.6 kB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.10/dist-packages (from Twisted<23.8.0,>=18.9.0->scrapy) (4.5.0)\n","Requirement already satisfied: idna in /usr/local/lib/python3.10/dist-packages (from tldextract->scrapy) (3.4)\n","Requirement already satisfied: requests>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from tldextract->scrapy) (2.31.0)\n","Collecting requests-file>=1.4 (from tldextract->scrapy)\n","  Downloading requests_file-1.5.1-py2.py3-none-any.whl (3.7 kB)\n","Requirement already satisfied: filelock>=3.0.8 in /usr/local/lib/python3.10/dist-packages (from tldextract->scrapy) (3.12.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from Automat>=0.8.0->Twisted<23.8.0,>=18.9.0->scrapy) (1.16.0)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.12->cryptography>=36.0.0->scrapy) (2.21)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.1.0->tldextract->scrapy) (3.2.0)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.1.0->tldextract->scrapy) (2.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.1.0->tldextract->scrapy) (2023.7.22)\n","Installing collected packages: PyDispatcher, incremental, constantly, zope.interface, w3lib, queuelib, protego, jmespath, itemadapter, hyperlink, cssselect, Automat, Twisted, requests-file, parsel, tldextract, service-identity, itemloaders, scrapy\n","Successfully installed Automat-22.10.0 PyDispatcher-2.0.7 Twisted-22.10.0 constantly-15.1.0 cssselect-1.2.0 hyperlink-21.0.0 incremental-22.10.0 itemadapter-0.8.0 itemloaders-1.1.0 jmespath-1.0.1 parsel-1.8.1 protego-0.3.0 queuelib-1.6.2 requests-file-1.5.1 scrapy-2.10.1 service-identity-23.1.0 tldextract-3.5.0 w3lib-2.1.2 zope.interface-6.0\n"]}]},{"cell_type":"markdown","source":["### Importing Libraries"],"metadata":{"id":"6X_Iz2jNSoeK"}},{"cell_type":"code","execution_count":16,"metadata":{"id":"o3ZwZ1ERR_RH","executionInfo":{"status":"ok","timestamp":1694421211776,"user_tz":-330,"elapsed":10,"user":{"displayName":"Taru Agarwal","userId":"06943546457686899005"}}},"outputs":[],"source":["import os\n","from bs4 import BeautifulSoup\n","import urllib\n","from urllib.request import Request\n","#import urllib2\n","import pandas as pd\n","from lxml import html\n","import re\n","import requests\n","from string import ascii_uppercase\n","import random\n","from itertools import islice, count\n","from tqdm import tqdm\n","from scrapy.http import HtmlResponse\n","import math"]},{"cell_type":"markdown","source":["### Input variables from users"],"metadata":{"id":"Hkr3uYhnS53f"}},{"cell_type":"code","source":["path = r'/content/drive/MyDrive/GITHUB/PROJECT1' ## destination path location to store final files\n","comp_folder ='BP' ## company's name\n","comp_list = ['BP'] ## exact name of the company which is mentioned in Indeed URL after 'cmp'\n","# For eg: http://www.indeed.com/cmp/BP/reviews?fcountry=ALL&start=0"],"metadata":{"id":"9EiBeyMfSY0_","executionInfo":{"status":"ok","timestamp":1694420370547,"user_tz":-330,"elapsed":439,"user":{"displayName":"Taru Agarwal","userId":"06943546457686899005"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def build_url(url, company_name):\n","    return url + '/cmp/' + company_name + '/reviews?fcountry=ALL&start='\n","\n","def get_reviews(review_url, comp, path):\n","    review_df = pd.DataFrame()\n","    review_rating, review_title,reviewer_job, reviewer_location, review_text, pro_review_text, con_review_text, review_date, former= [],[],[],[],[],[],[],[],[]\n","    WLB, CB, JSA, MNT, JC = [], [], [], [], []\n","    i=4\n","    try:\n","        itr = int(review_url[review_url.find('&start=')+7:])\n","        url = urllib.request.urlopen(review_url)\n","        soup = BeautifulSoup(url,\"lxml\")\n","\n","        containers=soup.find_all('div',{'class':'cmp-Review-container'})\n","        print(len(containers))\n","\n","        for c in containers:\n","            try:\n","                review_rating.append(c.find('div', {'class': 'cmp-ReviewRating-text'}).text)\n","            except:\n","                review_rating.append('NA')\n","            try:\n","                review_title.append(c.find('div', {'class': 'cmp-Review-title'}).text)\n","            except:\n","                review_title.append('NA')\n","            try:\n","                reviewer_job.append(c.find('span', {'class':'cmp-ReviewAuthor'}).contents[1].text)\n","                former.append(c.find('span', {'class':'cmp-ReviewAuthor'}).contents[4])\n","                i=4\n","            except:\n","                try:\n","                   reviewer_job.append(c.find('span', {'class':'cmp-ReviewAuthor'}).contents[1])\n","                   former.append(c.find('span', {'class':'cmp-ReviewAuthor'}).contents[5])\n","                   i=5\n","                except:\n","                   reviewer_job.append('NA')\n","                   former.append('NA')\n","            try:\n","                reviewer_location.append(c.find('span', {'class':'cmp-ReviewAuthor'}).contents[i+3].text)\n","            except:\n","                try:\n","                   reviewer_location.append(c.find('span', {'class':'cmp-ReviewAuthor'}).contents[i+4])\n","                except:\n","                    reviewer_location.append('NA')\n","            try:\n","                review_text.append(c.find('div', {'class':'cmp-Review-text'}).text)\n","            except:\n","                review_text.append('NA')\n","            try:\n","                pro_review_text.append(c.find('div', {'class':'cmp-ReviewProsCons-prosText'}).text)\n","            except:\n","                pro_review_text.append('NA')\n","            try:\n","                con_review_text.append(c.find('div', {'class':'cmp-ReviewProsCons-consText'}).text)\n","            except:\n","                con_review_text.append('NA')\n","            try:\n","                review_date.append(c.find('span', {'class':'cmp-ReviewAuthor'}).contents[-1])\n","            except:\n","                review_date.append('NA')\n","            try:\n","                WLB.append(c.find_all('div', {'class': 'cmp-RatingStars-starsFilled'})[1]['style'][6:])\n","            except:\n","                WLB.append('NA')\n","            try:\n","                CB.append(c.find_all('div', {'class': 'cmp-RatingStars-starsFilled'})[2]['style'][6:])\n","            except:\n","                CB.append('NA')\n","            try:\n","                JSA.append(c.find_all('div', {'class': 'cmp-RatingStars-starsFilled'})[3]['style'][6:])\n","            except:\n","                JSA.append('NA')\n","            try:\n","                MNT.append(c.find_all('div', {'class': 'cmp-RatingStars-starsFilled'})[4]['style'][6:])\n","            except:\n","                MNT.append('NA')\n","            try:\n","                JC.append(c.find_all('div', {'class': 'cmp-RatingStars-starsFilled'})[5]['style'][6:])\n","            except:\n","                JC.append('NA')\n","\n","        df = pd.DataFrame(list(zip(review_rating, review_title,reviewer_job, reviewer_location, review_text, pro_review_text, con_review_text, review_date, former,WLB, CB, JSA, MNT, JC)))\n","        df.columns=['Review_Rating', 'Review_Title', 'Job_Title', 'Job_Location', 'Review_Text', 'Pro_Review', 'Con_Review', 'Date_of_Review', 'Former_employee', 'Job_Work_Life_Balance', 'Compensation_Benefits', 'Job_Security_Advancement', 'Management', 'Job_Culture']\n","        df['Company'] = comp\n","        review_df = review_df.append(df)\n","        review_df = review_df.drop_duplicates()\n","        review_df.to_excel(path + '/review_data/indeed_review_' + comp + str(itr) + '.xlsx', index=False)\n","    except:\n","        print(review_url)"],"metadata":{"id":"oYUfdCkWTeZ8","executionInfo":{"status":"ok","timestamp":1694420094438,"user_tz":-330,"elapsed":3,"user":{"displayName":"Taru Agarwal","userId":"06943546457686899005"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["## Start of the code\n","if __name__=='__main__':\n","  base_url = \"http://www.indeed.com\"\n","  for each in range(len(comp_list)):\n","      company = comp_list[each]\n","      #max_pages = page[each]\n","      base = build_url(base_url,company)\n","      review_url = base + '0'\n","      url = urllib.request.urlopen(review_url)\n","      soup = BeautifulSoup(url,\"lxml\")\n","      max_pages = math.ceil(pd.to_numeric(re.sub('[^0-9]+','',soup.find('div',{'class':'cmp-ReviewsCount'}).text))/20)\n","\n","      page_range = list(range(0, max_pages))\n","      review_urls = [f'{base}{str(x*20)}' for \\\n","                x in page_range]\n","\n","      from joblib import parallel_backend, Parallel, delayed\n","      gen = count(0, 1)\n","      with parallel_backend('threading', n_jobs=8):\n","          Parallel()(delayed(get_reviews)(review_url, comp=company,path=path + '/' + comp_folder) for review_url in tqdm(review_urls, position=0, leave=True))\n","\n","      from glob import glob\n","      file_list = glob(path + '/' + comp_folder + '/review_data/indeed_review_' + company + '*.xlsx')\n","      df_list = [pd.read_excel(file) for file in file_list]\n","      complete_df = pd.concat(df_list, axis=0).drop_duplicates()\n","      complete_df.to_excel(path + '/' + comp_folder + '/Data/' + company + '_indeed_reviews_complete.xlsx', index=False)"],"metadata":{"id":"1uLhBs-uUBzN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"pRYt1-47XETc"},"execution_count":null,"outputs":[]}]}